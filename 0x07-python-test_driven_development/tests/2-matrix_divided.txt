from ../2-matrix_divided.py import matrix_divided
import unittest


class TestMatrixDivide(unittest.TestCase):
    
    def test_wrong_matrix(self):
        # test if the function raises the supposed error in case of worng matrix input
        test_matrix_1 = []
        test_matrix_2 = [1,2,3]
        test_matrix_3 = [[1,2,3], [1,2], []]
        test_matrix_4 = [[1,2, 4], ['a', 'b', 3], [3, 5, 9]]

        self.assertRaises(TypeError, matrix_divided, test_matrix_1, 3)
        self.assertRaises(TypeError, matrix_divided, test_matrix_2, 3)
        self.assertRaises(TypeError, matrix_divided, test_matrix_3, 3)
        self.assertRaises(TypeError, matrix_divided, test_matrix_4, 3)
    
    def test_worng_div(self):
        # test the worng div 
        test_matrix = [[1,2,3], [1,3,5]]
        self.assertRaises(ZeroDivisionError, matrix_divided, test_matrix, 0)
        self.assertRaises(TypeError, matrix_divided, test_matrix, 's')

    def test_output(self):
        # test the courrect output
        test_matrix = [[2,4,6], [4,8,10]]
        test_matrix_copy = [[2,4,6], [4,8,10]]
        div_1 = 2
        corrct_output_1 = [[1,2,3], [2,4,5]]
        div_2 = 2.0
        corrct_output_2 = [[1.0,2.0,3.0], [2.0,4.0,5.0]]

        self.assertListEqual(matrix_divided(test_matrix, div_1), corrct_output_1)
        self.assertListEqual(test_matrix_copy, test_matrix)
        self.assertListEqual(matrix_divided(test_matrix, div_2), corrct_output_2)
